'''
Copyright 2016 Tom Kenter

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and limitations
under the License.
'''

import codecs
import os
import cPickle
import numpy as np
import pandas as pd

class weekUtils:
  def __init__(self, data=None, sSentencePositionsDir=None, 
               sName=None, bVerbose=False):
    #self.file ='tmp2/yckuan/data/filter2/'+data
    csv=pd.DataFrame.from_csv(data)
    self.data=csv['text']
    self.i=0
    self.sName='week'
  def __iter__(self): # Simple wrapper
    for t in self.yieldTuple():
      yield t
  def count(self):
    return len(self.data)
  def yieldSentence(self):
    # NOTE that we (ab)use the random indices, which were not shuffled yet
    for iFileIndex in [0,1]:
      # Get the next index for the sentence position array
      for iSentencePosition in self.aFiles[iFileIndex]["npaSentencePositions"]:
        # Go to that position in the file
        self.aFiles[iFileIndex]["fhFile"].seek(iSentencePosition)
        # Read the sentence
        yield self.toTokens(self.aFiles[iFileIndex]["fhFile"].readline())

  def yieldRandomSentence(self):
    '''
    NOTE that this iterator will yield FOREVER
    '''
      # Read the sentence
    yield self.data[np.random.randint(self.count())]


  def yieldTuple(self):
    '''
    This yields a random tuple, until all tuples are yielded
    '''
    self.i=self.i+1
    i=self.i  
    # Yield the tuple, sentence n first
    print self.data[i]
    yield (self.data[i-1], self.data[i],self.data[i+1] )
    
  def toTokens(self, sLine):
    return [x for x in sLine.strip().split() if x not in self.aNonTokens]

# You can use the bit below to test something
if __name__ == "__main__":
  import argparse
  oArgsParser = \
      argparse.ArgumentParser(description='Toronto Book Corpus utils')
  oArgsParser.add_argument("TORONTO_BOOK_CORPUS_DIR")
  oArgsParser.add_argument("TORONTO_BOOK_CORPUS_SENTENCE_POSITIONS_DIR")
  oArgsParser.add_argument("-r", dest="bRandom", action="store_true")
  oArgsParser.add_argument("-d", dest="bDebug", action="store_true")
  oArgsParser.add_argument("-v", dest="bVerbose", action="store_true")
  oArgs = oArgsParser.parse_args()

  if oArgs.bDebug:
    import pdb
    pdb.set_trace()

  oToBoCo = \
    torontoBookCorpusIterator(oArgs.TORONTO_BOOK_CORPUS_DIR,
                              oArgs.TORONTO_BOOK_CORPUS_SENTENCE_POSITIONS_DIR,
                              bVerbose=oArgs.bVerbose)

  i = 0
  if oArgs.bRandom:
    for s in oToBoCo.yieldRandomSentence():
      print ' '.join(s)
      i += 1
      if i == 10:
        break
  else:
    funcRandomIterator = oToBoCo.yieldRandomSentence()

    for t in oToBoCo.yieldTuple():
      aRandomTokens1 = next(funcRandomIterator)
      aRandomTokens2 = next(funcRandomIterator)

      print "s  : %s\ns-1: %s\ns+1: %s\nr1 : %s\nr2 : %s\n" % (' '.join(t[0]),
                                        ' '.join(t[1]),
                                        ' '.join(t[2]),
                                        ' '.join(aRandomTokens1),
                                        ' '.join(aRandomTokens2) )


